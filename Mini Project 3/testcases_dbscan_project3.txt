Test case 1: DBSCAN

Input data matrix: use sklearn's make_blobs
X,y = make_blobs(n_samples=300, centers=3, random_state=35)
Input epsilon: 0.5
Input minpts: 10

Output:
Number of clusters found: 3
Core point indices:
[1,
 6,
 9,
 10,
 11,
 12,
 15,
 17,
 20,
 21,
 30,
 35,
 36,
 38,
 39,
 51,
 61,
 69,
 74,
 75,
 77,
 79,
 87,
 88,
 94,
 95,
 98,
 103,
 104,
 112,
 115,
 116,
 117,
 119,
 126,
 141,
 143,
 147,
 151,
 155,
 158,
 161,
 169,
 170,
 174,
 175,
 177,
 180,
 181,
 184,
 188,
 191,
 201,
 205,
 208,
 211,
 212,
 214,
 223,
 224,
 236,
 237,
 239,
 242,
 243,
 245,
 247,
 248,
 257,
 258,
 260,
 262,
 263,
 270,
 279,
 287,
 291,
 296,
 299] 

Border point indices:
[5,
 14,
 18,
 22,
 23,
 24,
 26,
 33,
 34,
 46,
 48,
 49,
 50,
 55,
 56,
 57,
 62,
 63,
 64,
 66,
 70,
 76,
 81,
 86,
 90,
 92,
 96,
 97,
 99,
 105,
 110,
 114,
 122,
 123,
 125,
 129,
 132,
 133,
 134,
 135,
 137,
 138,
 145,
 146,
 152,
 154,
 160,
 162,
 164,
 186,
 187,
 190,
 194,
 202,
 203,
 204,
 213,
 215,
 217,
 226,
 234,
 240,
 250,
 253,
 259,
 264,
 265,
 267,
 275,
 277,
 280,
 282,
 292,
 294]

Noise point indices:
[0,
 2,
 3,
 4,
 7,
 8,
 13,
 16,
 19,
 25,
 27,
 28,
 29,
 31,
 32,
 37,
 40,
 41,
 42,
 43,
 44,
 45,
 47,
 52,
 53,
 54,
 58,
 59,
 60,
 65,
 67,
 68,
 71,
 72,
 73,
 78,
 80,
 82,
 83,
 84,
 85,
 89,
 91,
 93,
 100,
 101,
 102,
 106,
 107,
 108,
 109,
 111,
 113,
 118,
 120,
 121,
 124,
 127,
 128,
 130,
 131,
 136,
 139,
 140,
 142,
 144,
 148,
 149,
 150,
 153,
 156,
 157,
 159,
 163,
 165,
 166,
 167,
 168,
 171,
 172,
 173,
 176,
 178,
 179,
 182,
 183,
 185,
 189,
 192,
 193,
 195,
 196,
 197,
 198,
 199,
 200,
 206,
 207,
 209,
 210,
 216,
 218,
 219,
 220,
 221,
 222,
 225,
 227,
 228,
 229,
 230,
 231,
 232,
 233,
 235,
 238,
 241,
 244,
 246,
 249,
 251,
 252,
 254,
 255,
 256,
 261,
 266,
 268,
 269,
 271,
 272,
 273,
 274,
 276,
 278,
 281,
 283,
 284,
 285,
 286,
 288,
 289,
 290,
 293,
 295,
 297,
 298]

Cluster assignments:
[0., 1., 0., 0., 0., 3., 1., 0., 0., 2., 1., 1., 3., 0., 1., 1., 0.,
       2., 2., 0., 2., 2., 2., 1., 3., 0., 3., 0., 0., 0., 3., 0., 0., 1.,
       1., 3., 2., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 2., 3.,
       3., 0., 0., 0., 2., 1., 2., 0., 0., 0., 2., 1., 2., 1., 0., 3., 0.,
       0., 1., 1., 0., 0., 0., 2., 2., 2., 2., 0., 2., 0., 3., 0., 0., 0.,
       0., 1., 1., 1., 0., 3., 0., 1., 0., 2., 3., 3., 1., 1., 1., 0., 0.,
       0., 3., 1., 1., 0., 0., 0., 0., 1., 0., 3., 0., 3., 2., 3., 1., 0.,
       1., 0., 0., 2., 1., 0., 1., 2., 0., 0., 1., 0., 0., 2., 1., 2., 3.,
       0., 1., 2., 0., 0., 3., 0., 2., 0., 2., 2., 1., 0., 0., 0., 3., 2.,
       0., 3., 1., 0., 0., 1., 0., 2., 2., 3., 0., 3., 0., 0., 0., 0., 1.,
       1., 0., 0., 0., 1., 1., 0., 1., 0., 0., 3., 1., 0., 0., 2., 0., 3.,
       3., 2., 0., 1., 3., 0., 0., 3., 0., 0., 0., 0., 0., 0., 3., 1., 2.,
       1., 1., 0., 0., 2., 0., 0., 3., 3., 3., 3., 1., 0., 1., 0., 0., 0.,
       0., 0., 1., 3., 0., 2., 0., 0., 0., 0., 0., 0., 0., 2., 0., 1., 3.,
       0., 2., 3., 0., 1., 3., 0., 1., 0., 3., 2., 0., 2., 0., 0., 1., 0.,
       0., 0., 3., 1., 2., 3., 0., 3., 1., 3., 3., 0., 1., 0., 0., 2., 0.,
       0., 0., 0., 2., 0., 2., 0., 2., 3., 0., 3., 0., 0., 0., 0., 3., 0.,
       0., 0., 1., 1., 0., 1., 0., 2., 0., 0., 2.]

Test case 2: DBSCAN
Use the following code to generate moon-shaped 2-D data:

from sklearn.datasets import make_moons
X_moons, y = make_moons(n_samples=200, noise=.06, random_state=4)
Input data: X_moons from above
Input epsilon: 0.4
Input minpts: 20

Output:
Number of clusters found: 2
Core points indices:
[0,
 2,
 3,
 5,
 6,
 7,
 8,
 9,
 10,
 12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 22,
 23,
 24,
 25,
 26,
 28,
 29,
 30,
 31,
 32,
 33,
 34,
 35,
 37,
 38,
 39,
 40,
 41,
 42,
 43,
 44,
 45,
 46,
 47,
 48,
 49,
 50,
 51,
 52,
 53,
 55,
 56,
 57,
 58,
 59,
 60,
 61,
 63,
 64,
 65,
 66,
 67,
 68,
 69,
 71,
 72,
 73,
 74,
 76,
 77,
 78,
 80,
 81,
 82,
 83,
 84,
 85,
 86,
 87,
 88,
 89,
 90,
 91,
 92,
 93,
 94,
 95,
 96,
 98,
 99,
 100,
 101,
 102,
 103,
 104,
 106,
 107,
 110,
 111,
 112,
 113,
 114,
 116,
 117,
 118,
 120,
 121,
 122,
 123,
 124,
 125,
 126,
 127,
 128,
 129,
 130,
 131,
 133,
 134,
 136,
 137,
 138,
 140,
 142,
 143,
 144,
 145,
 146,
 147,
 148,
 149,
 150,
 151,
 152,
 153,
 154,
 158,
 159,
 161,
 162,
 163,
 164,
 165,
 167,
 168,
 169,
 170,
 171,
 172,
 173,
 174,
 175,
 177,
 178,
 179,
 180,
 181,
 182,
 183,
 185,
 187,
 189,
 191,
 192,
 193,
 194,
 196,
 197,
 198,
 199]

Border point indices:
[1,
 4,
 11,
 21,
 27,
 36,
 54,
 62,
 70,
 75,
 79,
 97,
 105,
 108,
 109,
 115,
 119,
 132,
 135,
 139,
 141,
 155,
 156,
 157,
 160,
 166,
 176,
 184,
 186,
 188,
 190,
 195]

Noise point indices:
[]

Cluster assignments:
[1., 1., 2., 2., 1., 2., 1., 2., 1., 2., 1., 2., 2., 2., 2., 2., 1.,
       2., 2., 1., 1., 2., 2., 1., 1., 2., 2., 1., 1., 2., 1., 1., 2., 1.,
       2., 2., 2., 1., 2., 1., 1., 2., 2., 2., 2., 1., 1., 2., 1., 1., 2.,
       2., 1., 1., 1., 2., 2., 1., 2., 1., 1., 2., 1., 2., 2., 1., 2., 1.,
       1., 1., 1., 2., 2., 1., 1., 2., 1., 2., 2., 2., 1., 1., 2., 1., 2.,
       1., 2., 2., 1., 1., 2., 1., 1., 2., 2., 2., 1., 1., 1., 2., 1., 1.,
       1., 1., 1., 1., 1., 1., 2., 2., 2., 2., 2., 1., 2., 2., 1., 2., 1.,
       1., 2., 2., 2., 1., 1., 1., 2., 1., 1., 1., 1., 2., 2., 2., 2., 1.,
       1., 2., 1., 1., 1., 2., 1., 1., 1., 1., 2., 2., 1., 1., 1., 2., 2.,
       1., 2., 2., 1., 1., 2., 2., 1., 2., 2., 1., 2., 2., 2., 1., 1., 2.,
       1., 2., 1., 2., 2., 1., 1., 2., 1., 2., 1., 1., 2., 2., 2., 1., 2.,
       1., 1., 2., 2., 1., 2., 1., 1., 2., 2., 2., 2., 2.]


Test case 3: DBSCAN
Use the following code to load the iris data set:
from sklearn.datasets import load_iris
X_iris = load_iris()['data']
Input data: X_iris
Input epsilon: 0.5
Input minpts: 10

Output:
Number of clusters found: 2
Core point indices:
[0,
 1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
 11,
 12,
 16,
 17,
 19,
 20,
 21,
 23,
 25,
 26,
 27,
 28,
 29,
 30,
 31,
 34,
 35,
 36,
 37,
 38,
 39,
 40,
 42,
 43,
 45,
 46,
 47,
 48,
 49,
 51,
 54,
 55,
 61,
 63,
 67,
 69,
 71,
 74,
 78,
 82,
 83,
 86,
 88,
 89,
 91,
 92,
 94,
 95,
 96,
 97,
 99,
 104,
 111,
 112,
 116,
 123,
 126,
 127,
 138,
 140,
 147]

Border point indices:
[13,
 14,
 18,
 22,
 24,
 32,
 33,
 44,
 50,
 52,
 53,
 56,
 58,
 59,
 62,
 64,
 65,
 66,
 70,
 72,
 73,
 75,
 76,
 77,
 79,
 80,
 81,
 84,
 85,
 90,
 101,
 103,
 110,
 115,
 120,
 124,
 128,
 132,
 133,
 137,
 139,
 141,
 142,
 143,
 144,
 145,
 146,
 149]

Noise point indices:
[15,
 41,
 57,
 60,
 68,
 87,
 93,
 98,
 100,
 102,
 105,
 106,
 107,
 108,
 109,
 113,
 114,
 117,
 118,
 119,
 121,
 122,
 125,
 129,
 130,
 131,
 134,
 135,
 136,
 148]

Cluster assignments:
[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 2.,
       2., 2., 2., 2., 2., 2., 0., 2., 2., 0., 2., 2., 2., 2., 2., 2., 2.,
       0., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 0., 2., 2., 2., 2., 2., 0., 2., 2., 2., 2., 0., 2., 0., 2.,
       0., 2., 2., 0., 0., 0., 0., 0., 2., 2., 2., 0., 0., 2., 2., 0., 0.,
       0., 2., 0., 0., 2., 2., 0., 2., 2., 2., 0., 0., 0., 2., 2., 0., 0.,
       0., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 0., 2.]


