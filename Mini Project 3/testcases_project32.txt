Test case 1: k-means

Input data matrix:
D = np.array([[-1,2], [-2,-2], [3,2], [5,4.3], [-3,3], [-3, -1], [5,-3], [3,4], [2.3, 6.5]])
Input k:
k=2
Input epsilon:
eps = 0.000001
Initial means: 
[3.90304975, 2.51839422] and [-1.21226502 , 3.6765421 ]

Output: 
means: [ 3.66,  2.76] and [-2.25,  0.5 ]
cluster assignments: [1., 1., 0., 0., 1., 1., 0., 0., 0.]

Test case 2: k-means

Input data matrix:
D = np.array([[-1,2], [-2,-2], [3,2], [5,4.3], [-3,3], [-3, -1], [5,-3], [3,4], [2.3, 6.5], [4, 2], [4,4], [-2.3, 1.5]])
Input k:
k=3
Input epsilon:
eps = 0.000001
Initial means: 
[3.67371566, 3.05039513] and [-2.27144128 , 0.58447117] and [4.50290941, 4.78503096]

Output:
means: [ 4.        ,  0.33333333] and [-2.26      ,  0.7       ] and [ 3.575     ,  4.7       ]
Cluster assignments: [1., 1., 0., 2., 1., 1., 0., 2., 2., 0., 2., 1.]

Test case 3: k-means

Input data matrix: use sklearn's make_blobs
X,y = make_blobs(n_samples=300, centers=3, random_state=35)
Input k:
k=3
Input epsilon: 0.00000001
Initial means: 
[ 3.75224869 , -2.9680029 ]
[-1.45630451 , -1.65071389]
[-3.16968936 , -1.47368135]

Output:
Means:
[ 6.20253055, -7.98535796],
[-0.69349908, -3.83286075],
[-5.36633913, -4.62487197]
Cluster assignments:
[0., 2., 0., 1., 0., 0., 2., 0., 1., 1., 2., 2., 0., 0., 2., 2., 1.,
       1., 1., 0., 1., 1., 1., 2., 0., 0., 0., 2., 1., 1., 0., 1., 0., 2.,
       2., 0., 1., 1., 2., 2., 2., 1., 0., 2., 2., 1., 2., 0., 2., 1., 0.,
       0., 2., 2., 0., 1., 2., 1., 2., 2., 1., 1., 2., 1., 2., 1., 0., 1.,
       1., 2., 2., 1., 1., 1., 1., 1., 1., 1., 0., 1., 1., 0., 2., 1., 1.,
       0., 2., 2., 2., 0., 0., 1., 2., 0., 1., 0., 0., 2., 2., 2., 2., 0.,
       2., 0., 2., 2., 0., 0., 1., 0., 2., 1., 0., 0., 0., 1., 0., 2., 2.,
       2., 2., 1., 1., 2., 1., 2., 1., 0., 0., 2., 1., 2., 1., 2., 1., 0.,
       0., 2., 1., 1., 0., 0., 1., 1., 0., 1., 1., 2., 1., 1., 0., 0., 1.,
       0., 0., 2., 0., 2., 2., 1., 1., 1., 0., 2., 0., 0., 2., 1., 2., 2.,
       2., 0., 2., 1., 2., 2., 0., 2., 1., 0., 0., 2., 0., 0., 1., 2., 0.,
       0., 1., 0., 2., 0., 0., 0., 0., 0., 1., 1., 2., 0., 1., 0., 2., 1.,
       2., 2., 0., 2., 1., 2., 0., 0., 0., 0., 0., 2., 1., 2., 2., 1., 2.,
       2., 1., 2., 0., 0., 1., 0., 0., 2., 2., 0., 2., 0., 1., 1., 2., 0.,
       0., 1., 0., 1., 2., 0., 2., 2., 1., 0., 1., 2., 1., 2., 0., 2., 2.,
       1., 2., 0., 2., 1., 0., 0., 0., 2., 0., 0., 1., 2., 2., 1., 1., 2.,
       2., 1., 1., 1., 1., 1., 0., 1., 0., 1., 0., 0., 2., 0., 2., 0., 0.,
       1., 1., 2., 2., 1., 2., 0., 1., 1., 1., 1.]

Test case 4: k-means
Use the following code to generate moon-shaped 2-D data:

from sklearn.datasets import make_moons
X_moons, y = make_moons(n_samples=200, noise=.06, random_state=4)
Input data: X_moons from above
Input k:
k=2
Input epsilon: 
0.00001
Initial means:
[ 1.52642034 , -0.4699234 ]
[0.42680618 , 0.51168439]

Output:
Means:
[[ 1.2412556 , -0.11496583],
[-0.15971746,  0.56669345]]

Cluster assignments:
[0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1,
       0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0,
       0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1,
       0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0,
       1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1,
       0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
       0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1,
       0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1,
       0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0,
       0, 1]

Test case 5: k-means
Use the following code to load the iris data set:
from sklearn.datasets import load_iris
X_iris = load_iris()['data']
Input data: X_iris
Input k:
k=3
Input epsilon:
Epsilon = 0.00001
Initial means:
[5.24513354 , 3.4487186  , 6.59654982 , 0.36294203]
[7.08970814 , 4.3925459 ,  6.67452647 , 0.13835156]
[7.08253763 , 2.14773688 , 2.50271098 , 0.91692539]

Output:
Means:
[[5.9016129 , 2.7483871 , 4.39354839, 1.43387097],
 [6.85      , 3.07368421, 5.74210526, 2.07105263],
 [5.006     , 3.428     , 1.462     , 0.246     ]]
Cluster assignments:
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,
       1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1,
       1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0]
